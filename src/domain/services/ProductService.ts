// src/domain/services/ProductService.ts
import ProductRepository from '../repositories/ProductRepository';
import Product from '../models/Product/Product';
import { v4 as uuidv4 } from 'uuid'; // For generating UUIDs
import { deleteFromStorage } from '../../infrastructure/services/deleteImageService';
export default class ProductService {
  constructor(private productRepository: ProductRepository) {}

  async getAllProducts(
    page: number,
    pageSize: number,
    categoryTitle?: string,
  ): Promise<{ products: Product[]; total: number }> {
    const { products, total } = await this.productRepository.findAll(
      page,
      pageSize,
      categoryTitle,
    );
    return { products, total };
  }

  async createProduct(
    name: string,
    description: string,
    price: number,
    sku: string,
    slug: string,
    active: boolean,
  ): Promise<Product> {
    const product = new Product(
      uuidv4(),
      name,
      description,
      price,
      sku,
      slug,
      active,
    ); // id will be auto-generated by Prisma
    return this.productRepository.create(product);
  }

  async getProductById(id: string): Promise<Product | null> {
    return this.productRepository.findById(id);
  }
  async updateProduct(
    id: string,
    name: string,
    description: string,
    price: number,
    sku: string,
    slug: string,
    active: boolean,
  ): Promise<Product> {
    return this.productRepository.update(id, {
      name,
      description,
      price,
      sku,
      slug,
      active,
    });
  }
  async updateProductMainImage(
    productId: string,
    imageUrl: string,
  ): Promise<Product> {
    return this.productRepository.updateMainImage(productId, imageUrl);
  }
  async addProductGalleryImage(
    productId: string,
    imageUrl: string,
  ): Promise<Product> {
    return this.productRepository.addGalleryImage(productId, imageUrl);
  }
  async editProductGalleryImage(
    productId: string,
    imageUrls: string[],
  ): Promise<Product> {
    return this.productRepository.editGalleryImage(productId, imageUrls);
  }
  async deleteProduct(productId: string): Promise<void> {
    const product = await this.productRepository.findById(productId);
    const bucketName = 'test';

    // Step 1: Delete gallery images from storage (if available)
    if (product?.imageUrls) {
      for (const galleryImage of product.imageUrls) {
        await deleteFromStorage(bucketName, galleryImage); // Custom logic for deleting images
      }
    }

    // Step 2: Delete main image (if available)
    if (product?.imageUrl) {
      await deleteFromStorage(bucketName, product.imageUrl); // Custom logic for deleting main image
    }

    // Step 3: Delete the product from the database
    return this.productRepository.deleteProduct(productId);
  }
}
